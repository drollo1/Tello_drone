#include "Tello_drone.h"

Tello_drone::Tello_drone(){
	isConnected = false;
	m_cmdSockfd = socket(AF_INET, SOCK_DGRAM, 0);
	m_statSockfd = socket(AF_INET, SOCK_DGRAM, 0);
}

Tello_drone::~Tello_drone(){
	close(m_cmdSockfd);
	close(m_statSockfd);
}

int Tello_drone::connectDrone(){
	if(!isConnected){
		//bind the port to send command on and get address for listening
		bindSocket(m_cmdSockfd, LOCAL_CMD_PORT);
		m_tello_sockaddr.sin_family = AF_INET;
		m_tello_sockaddr.sin_port = htons(TELLO_CMD_PORT);
		m_tello_sockaddr.sin_addr.s_addr = inet_addr(TELLO_IP);

		//bind to the stat output for tello drone
		bindSocket(m_statSockfd, LOCAL_STAT_PORT);

		sendCommand("command", strlen("command"));
		return 1;
	}
	else{
		printf("Already Connected to tello drone\n");
		fflush(stdout);
		return 0;
	}
}

int Tello_drone::sendCommand(char* cmd, int len){
	sendto(m_cmdSockfd, (char*) cmd, len, 0, (sockaddr*)&m_tello_sockaddr, sizeof(m_tello_sockaddr));

	char buffer[256];
	socklen_t sock_len;
	int n = recvfrom(m_cmdSockfd, (char*)buffer, 256, 0, (sockaddr*)&m_tello_sockaddr, &sock_len);
	buffer[n] = '\0';
	printf("%s: %s\n", cmd, buffer);
	fflush(stdout);
}

int Tello_drone::printStatus(){
	char buffer[256];
	sockaddr_in tmp;
	socklen_t sock_len;
	int n = recvfrom(m_statSockfd, (char*)buffer, 256, 0, (sockaddr*)&tmp, &sock_len);
	buffer[n] = '\0';
	printf("Status: %s\n", buffer);
	fflush(stdout);
}

int Tello_drone::streamon(){
	sendCommand("streamon", strlen("streamon"));
	m_videoCap = new cv::VideoCapture((char *)"udp://0.0.0.0:11111", cv::CAP_FFMPEG);
}
/*
 * Private methods
 */
int Tello_drone::bindSocket(int fd, int port){
	sockaddr_in addr;
	addr.sin_family = AF_INET;
	addr.sin_port = htons(port);
	addr.sin_addr.s_addr = INADDR_ANY;
	if(0 > bind(fd, (sockaddr*) &addr, sizeof(addr))){
		printf("Couldn't bind to port %d\n", port);
		fflush(stdout);
		return -1;
	}
	return 1;
}
